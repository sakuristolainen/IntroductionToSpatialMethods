print_results <- function(classified_data) {
  #prints final results by the class
  #no need to modify
  #call: print_results(data_to_be_printed)
  print(classified_data[classified_data[, 4] == "0", ])
  print(classified_data[classified_data[, 4] == "1", ])
  print(classified_data[classified_data[, 4] == "2", ])
  print(classified_data[classified_data[, 4] == "3", ])
}

visualize_classification <- function(classification_data) {
  #visualizes classification with the scatter plot and colors
  #no need to modify
  #call: visualize_classification(data_to_be_visualized)
  
  #changes original data as numeric, f1=first entities of feature vector and f2=second entities of feature vector
  f1 <- as.numeric(classification_data$population_density_people_per_square_km)
  f2 <- as.numeric(classification_data$Internet_users_per_100_people)
  
  #unclassified points will be visible as red circles
  plot(f1, f2, col = "red", main = "k-nn classification results")
  
  #selects only data of class 1
  class1 <- classification_data[classification_data[, 4] == "1", ]
  
  #changes data type as numeric
  f1 <- as.numeric(class1$population_density_people_per_square_km)
  f2 <- as.numeric(class1$Internet_users_per_100_people)
  
  #visualizalises class 1
  points(f1, f2, col = "violet", lwd = 3)

  #selects only data of class 2  
  class2 <- classification_data[classification_data[, 4] == "2", ]

  #changes data type as numeric
  f1 <- as.numeric(class2$population_density_people_per_square_km)
  f2 <- as.numeric(class2$Internet_users_per_100_people)

  #visualizalises class 2
  points(f1, f2, col = "green", lwd = 3)
  
  #selects only data of class 3
  class3 <- classification_data[classification_data[, 4] == "3", ]

  #changes data type as numeric
  f1 <- as.numeric(class3$population_density_people_per_square_km)
  f2 <- as.numeric(class3$Internet_users_per_100_people)
  
  #visualizalises class 2
  points(f1, f2, col = "blue", lwd = 3)

} #end of function


knn_read_data <- function() {
  #reads data from file and sets training data
  #some modifications are needed
  
  #todo: change path to correspond your system 
  #and read data from Data_Extract_From_Jobs2.csv
  #European format of csv -> must use read.csv2() otherwise read.csv()
  data <- read.csv2("C:/Users/Documents/koulu/Introduction to Spatial Methods/Assignment3/Test_Data.csv")
  
  #changes original data as numeric, f1=first entity of feature vector and f2=second entity of feature vector
  f1 <- as.numeric(data$population_density_people_per_square_km)
  f2 <- as.numeric(data$Internet_users_per_100_people)

  #initialize a matrix of training data
  training_data <- matrix(nrow = 6, ncol = 3)
  
  #initializes training data (the results are highly depended on the selection of training data)
  #class1 training data, the third element illustrates the class number
  #you may change training data if you want to see how changes affect to the results
  
  training_data[1, 1:3] <- c(10, 90, 1)
  training_data[2, 1:3] <- c(20, 100, 1)
  
  #class2 training data
  training_data[3, 1:3] <- c(250, 90, 2)
  training_data[4, 1:3] <- c(330, 90, 2)
  
  #class3 training data
  training_data[5,1:3] <- c(100, 50, 3)
  training_data[6,1:3] <- c(150, 20, 3)
  
  #visualizes data and training data  
  plot(f1, f2, col = "gray", main = "data (gray circles) and training samples (larger circles)")
  points(training_data[1:2, 1], training_data[1:2, 2], col = "violet", cex = 2, lwd = 3)
  points(training_data[3:4, 1], training_data[3:4, 2], col = "green", cex = 2, lwd = 3)
  points(training_data[5:6, 1], training_data[5:6, 2], col = "blue", cex = 2, lwd = 3)

  #stores both data sets in a list in order to return two parameters from this function
  data_list <- list("data" = data, "training_data" = training_data)
  
  #returns data
  return(data_list)
}


knn <- function() {
  #main loop of knn program
  #major modifications are needed

  
  #in Rstudio run "Source" command 
  #and after that run the function from Rstudio console (command line): knn()
  
  #read data and training data
  data_list <- knn_read_data()
  
  #for the sake of readibility 
  data <- data_list$data
  training_data <- data_list$training_data
  
  #print data and training data in console
  print(data)
  print(training_data)
  
  #stop executing until "enter" is pressed
  cat ("Press [enter] to continue")
  line <- readline()
  
  #pick feature vectors 
  f1 <- as.numeric(data$population_density_people_per_square_km)
  f2 <- as.numeric(data$Internet_users_per_100_people)
  
  #normalization factors (when two variables have different scale, normalization is usually needed)
  normalize1 <- max(f1)
  normalize2 <- max(f2)
  
  #size of data
  size <- dim(data)

  
  #creates an empty column
  classification <- matrix(nrow = size[1], ncol = 1)

  #adds an empty column to data table (the name of the column is "classification" in this case)
  #use this matrix as the final result matrix
  classification_data <- cbind(data, classification)

  #initialize a new matrix that will be used for numeric calculations (for the sake of readibility)
  numeric_data <- matrix(nrow = size[1], ncol = 2) #change into numeric data and keeping identical column indexing with feature_data
  
  #selects only desired columns (columns 2 and 3) from original data matrix
  numeric_data <- data[1:size[1], 2:3]
  
  #change the data type as numeric
  numeric_data <- apply(numeric_data, 2, as.numeric)
  
  #normalize all data
  training_data[, 1] <- training_data[, 1] / normalize1
  training_data[, 2] <- training_data[, 2] / normalize2
  numeric_data[, 1] <- numeric_data[, 1] / normalize1
  numeric_data[, 2] <- numeric_data[, 2] / normalize2

  
  #todo: complete the following "for" loop to have some index,e.g. "i", that grows from "1" to "number of rows in data matrix" 
  
  for (i in 1:nrow(classification_data)) {
    
    #todo: initialize a new matrix for computing distances to all training data
    distance_data <- matrix(0, nrow = 6, ncol = 4)
    
    #todo: copy training matrix (three first columns) and leave the fourth column for distances
    distance_data[1:6, 1:3] <- training_data

    
    #compute distances to all training samples and store the value in your distances matrix
    #create a new "for" loop (with a different index than you used in previous "for" loop)
    for (j in 1:nrow(distance_data)) {
      
      distance_data[j, 4] <- (sqrt(abs(sum(as.vector(numeric_data[i,]) - as.vector(training_data[j,1:2])^2))))
    }
     #todo: sort data in ascending order according to distances
    
    ascending_distance <- distance_data[order(distance_data[, 4]), ]

     #find most frequent class among k shortest (in this case 3) distances
     
     #todo: select three first rows of classes (column 3)
    first_three <- ascending_distance[1:3, 3]
    class_counts <- table(first_three)

     #todo: compute which class occurs the most within three shortest distances
    frequent_class <- names(class_counts)[which.max(first_three)]


     #todo: make an "if" statement in which you check that there is two hits from the winner class
     #if there is one hit from each three classes, set the class to zero (null class)
     #you may also try what kind of result you get if all cases are classified
     #todo: within "if" statement, pick the winner class (most frequent) and store it to the "classification_data" (4th column) 
    if (class_counts[frequent_class] > 1){

      classification_data[i, 4] <- frequent_class
      
    } else {
      
      ascending_distance[i,4] <- 0
      
    }
    
      
  } #end of "for" loop
  
  #prints the class-wise results in Rstudio console
  print_results(classification_data)
  
  #visualizes the results in scatter plot
  visualize_classification(classification_data)

} #end of knn function





